name: publish

# Trigger the publish on tag pushes
# You can also use
#  release:
#    types: [published]
# But this requires you to manual make a new release from Github
on:
  push:
    tags:
      - v*.*.*

jobs:
  # Run Prettier & ESLint over the code base
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - name: Install Yarn
        run: npm i -g yarn
      - name: Install Packages
        run: yarn install
      - name: Run Prettier
        run: yarn run prettier
      - name: Run Linter
        run: yarn run lint
      # If it is a tag push, the ref is the tag, not the branch
      # For this one, I could just use master
      # - name: Extract Branch Name
      #   shell: bash
      #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      #   id: extract_branch
      - name: Count Changed Files
        shell: bash
        run: echo "##[set-output name=count;]$(git status -s -uno | wc -l)"
        id: changed_count
      - name: Commit Files
        if: steps.changed_count.outputs.count > 0
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "style: prettier & eslint changes" -a --no-verify
      - name: Push Changes
        if: steps.changed_count.outputs.count > 0
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master

  # Run all of the unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - name: Install Yarn
        run: npm i -g yarn
      - name: Install Packages
        run: yarn install
      - name: Run Unit Tests
        run: yarn run coverage
      - name: Upload coverage to CodeClimate
        run: |
          export GIT_BRANCH="${GITHUB_REF/refs\/heads\//}"
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t lcov coverage/lcov.info
          ./cc-test-reporter upload-coverage
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  # If `lint` and `test` pass, publish to Github Pkg Reg
  publish-gpr:
    needs: [test, clean]
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10
          registry-url: https://npm.pkg.github.com/
          scope: '@belsrc'
      - name: Install Yarn
        run: npm i -g yarn
      - name: Install Packages
        run: yarn install
      - name: Run Build
        run: yarn run build
      - name: Publish Package @ Github
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # # If `build` passes, publish to NPM Pkg Reg
  # publish-npm:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git Checkout
  #       uses: actions/checkout@v1
  #     - name: Setup Node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10
  #         registry-url: https://registry.npmjs.org/
  #         scope: '@belsrc'
  #     - name: Install Yarn
  #       run: npm i -g yarn
  #     - name: Install Packages
  #       run: yarn install
  #     - name: Run Build
  #       run: yarn run build
  #     - name: Publish Package @ NPM
  #       run: npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
